#!groovy

import groovy.json.JsonSlurperClassic

node {

               def BUILD_NUMBER=env.BUILD_NUMBER

               def RUN_ARTIFACT_DIR="tests/{BUILD_NUMBER}"

               def SFDC_USERNAME

              

               def HUB_ORG=env.HUB_ORG_DH

               def SFDC_HOST=env.SFDC_HOST_DH

               def JWT_KEY_CRED_ID=env.JWT_CRED_ID_DH

               def CONNECTED_APP_CONSUMER_KEY=env.CONNECTED_APP_CONSUMER_KEY_DH
               def TEST_KEY="Shan"

              

               println 'KEY IS'

               println JWT_KEY_CRED_ID

               println HUB_ORG

               println SFDC_HOST

               println CONNECTED_APP_CONSUMER_KEY
               println TEST_KEY

              
               println env.SFDX_CLI
               def toolbelt = env.SFDX_CLI

              

               stage('checkout source')

               {

                              //when running in multi branch job, one must issue this command

                              checkout scm

               }

              

               withCredentials([file(credentialsId: JWT_KEY_CRED_ID, variable: 'jwt_key_file')])

               {

                              stage('Deploy Code')

                              {

                                             if(isUnix())

                                             {

                                                            rc = sh returnStatus: true, script: "${toolbelt} force:auth:jwt:grant --clientid ${CONNECTED_APP_CONSUMER_KEY} --username ${HUB_ORG} --jwtkeyfile ${jwt_key_file} --setdefaultdevhubusername --instanceurl ${SFDC_HOST}"

                                             }

                                             else

                                             {
                                                            rcU1 = bat returnStatus: true, script: "\"${toolbelt}\" update"
                                                            rc = bat returnStatus: true, script: "\"${toolbelt}\" force:auth:jwt:grant --clientid ${CONNECTED_APP_CONSUMER_KEY} --username ${HUB_ORG} --jwtkeyfile \"${jwt_key_file}\" --setdefaultdevhubusername --instanceurl ${SFDC_HOST}"

                                             }

                                             println rc
                                             println rcU1

                                             if(rc != 0)

                                             {

                                                            error 'hub org authorization failed'

                                             }

                                            

                                             //need to pull out assigned username

                                             if(isUnix())

                                             {

                                                            rmsg = sh returnStatus: true, script: "${toolbelt} force:mdapi:deploy -d manifest/. -u ${HUB_ORG}"

                                             }

                                             else

                                             {

                                                           
                                                           rmsg = bat returnStatus: true, script: "\"${toolbelt}\" force:source:deploy -p force-app -u ${HUB_ORG}"

                                             }
                                             if(rmsg != 0)
                                             {
                                                  println ('************ERROR********* Deployment failed!!!!!!!!!!!!!!!!!')
                                             }
                                             else
                                             {
                                                  println rmsg
                                                   
                                             }
                                             println dStatus
                                             println('Hello from a job DSL script')

                                             println(rmsg)

                              }

               }

}
